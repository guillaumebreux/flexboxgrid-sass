$fbgs-grid-number: 12 !default;
$fbgs-gutter-width: 1rem !default;
$fbgs-gutter-compensation: #{$fbgs-gutter-width * -0.5} !default;
$fbgs-breakpoints: (
        '-sm': '(min-width: 560px)',
        '-med': '(min-width: 769px)',
        '-lg': '(min-width: 1024px)'
) !default;
@mixin basis($i, $n, $justify-start: false) {
  @if $justify-start {
    flex-basis: calc(#{100% / $n} - #{$fbgs-gutter-width});
    max-width: calc(#{100% / $n} - #{$fbgs-gutter-width});
    @if $i != $fbgs-grid-number {
      margin-left: #{$fbgs-gutter-width * 0.5}; margin-right: #{$fbgs-gutter-width * 0.5};
    }
  } @else {
    flex-basis: calc(#{100% / $n} - #{$fbgs-gutter-width * ($n - 1) / $n});
    max-width: calc(#{100% / $n} - #{$fbgs-gutter-width * ($n - 1) / $n});
  }
}
@mixin fbgs-init($item) {
  .flex#{$item} {
    display: flex; flex: 0 1 auto; flex-direction: row; justify-content: space-between;
    &.justify#{$item}-start:not(.no-compensation#{$item}) {
      margin-left: $fbgs-gutter-compensation; margin-right: $fbgs-gutter-compensation;
      box-sizing: border-box;
    }
    &.reverse { flex-direction: row-reverse; }
    &.flex#{$item}-column {
      flex-direction: column;
      &.reverse { flex-direction: column-reverse; }
    }
    &.force-width#{$item} { width: 100%; }
    > * { box-sizing: border-box; }
    .flex#{$item}-shrink-1 { flex-shrink: 1; }
    .flex#{$item}-center { margin-left: auto; margin-right: auto; }
    .flex#{$item}-left { margin-left: initial; margin-right: 0; }
    .flex#{$item}-right { margin-right: initial; margin-left: 0; }
  }
  @for $i from 1 through $fbgs-grid-number {
    $n: $fbgs-grid-number / $i;
    .flex#{$item}-#{$i},
    .flex#{$item}-offset-#{$i} { flex: 0 0 auto; }
    .flex#{$item}-offset-0 { margin-left: #{$fbgs-gutter-width * 0.5} }
    .flex#{$item}-offset-#{$i} { margin-left: calc(#{100% / $n} + #{$fbgs-gutter-width * 0.5}); }
    .flex#{$item}-#{$i} { @include basis($i, $n); }
    .justify#{$item}-start .flex#{$item}-#{$i} { @include basis($i, $n, true); }
  }
  .flex#{$item}-wrap { flex-wrap: wrap; }
  .flex#{$item}-nowrap { flex-wrap: nowrap; }

  .justify#{$item}-start { justify-content: flex-start; }
  .justify#{$item}-center { justify-content: center; }
  .justify#{$item}-end { justify-content: flex-end; }
  .justify#{$item}-around { justify-content: space-around; }
  .justify#{$item}-between { justify-content: space-between; }

  .align#{$item}-start { align-content: flex-start; }
  .align#{$item}-stretch { align-content: stretch; }
  .align#{$item}-between { align-content: space-between; }

  .align-items#{$item}-start { align-items: flex-start; }
  .align-items#{$item}-center { align-items: center; }
  .align-items#{$item}-end { align-items: flex-end; }
  .align-items#{$item}-stretch { align-items: stretch; }

  .align-self#{$item}-start { align-self: flex-start; }
  .align-self#{$item}-center { align-self: center; }
  .align-self#{$item}-end { align-self: flex-end; }

  .flex#{$item}-first { order: -1; }
  .flex#{$item}-last { order: 1; }
  .flex#{$item}-auto { flex-basis: auto; }
}
@include fbgs-init('');
@each $item, $breakpoint in $fbgs-breakpoints {
  @media #{$breakpoint} {
    @include fbgs-init($item);
  }
}